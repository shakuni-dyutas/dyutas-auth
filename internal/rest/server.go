// Package rest provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package rest

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// ErrorsDTO defines model for ErrorsDTO.
type ErrorsDTO struct {
	// Errors list of errors
	Errors []ErrorsDTO_Errors_Item `json:"errors"`
}

// ErrorsDTO_Errors_Item defines model for ErrorsDTO.errors.Item.
type ErrorsDTO_Errors_Item struct {
	// Code error code
	Code string `json:"code"`

	// Message error message
	Message              string                 `json:"message"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// GoogleSignInRequestDTO defines model for GoogleSignInRequestDTO.
type GoogleSignInRequestDTO struct {
	// GoogleAuthCode Google OAuth authorization code
	GoogleAuthCode string `json:"google_auth_code"`
}

// GoogleSignInResponseDTO defines model for GoogleSignInResponseDTO.
type GoogleSignInResponseDTO struct {
	// AccessToken JWT access token
	AccessToken string `json:"accessToken"`
	User        struct {
		// Email user email
		Email string `json:"email"`

		// Nickname user nickname
		Nickname string `json:"nickname"`

		// ProfileImageUrl user profile image url
		ProfileImageUrl string `json:"profileImageUrl"`

		// UserId user id
		UserId string `json:"user_id"`
	} `json:"user"`
}

// RefreshAuthResponseDTO defines model for RefreshAuthResponseDTO.
type RefreshAuthResponseDTO struct {
	// AccessToken JWT access token
	AccessToken string `json:"accessToken"`
}

// UserDTO defines model for UserDTO.
type UserDTO struct {
	// Email user email
	Email string `json:"email"`

	// Nickname user nickname
	Nickname string `json:"nickname"`

	// ProfileImageUrl user profile image url
	ProfileImageUrl string `json:"profileImageUrl"`

	// UserId user id
	UserId string `json:"user_id"`
}

// GoogleSignInJSONRequestBody defines body for GoogleSignIn for application/json ContentType.
type GoogleSignInJSONRequestBody = GoogleSignInRequestDTO

// Getter for additional properties for ErrorsDTO_Errors_Item. Returns the specified
// element and whether it was found
func (a ErrorsDTO_Errors_Item) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ErrorsDTO_Errors_Item
func (a *ErrorsDTO_Errors_Item) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ErrorsDTO_Errors_Item to handle AdditionalProperties
func (a *ErrorsDTO_Errors_Item) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["code"]; found {
		err = json.Unmarshal(raw, &a.Code)
		if err != nil {
			return fmt.Errorf("error reading 'code': %w", err)
		}
		delete(object, "code")
	}

	if raw, found := object["message"]; found {
		err = json.Unmarshal(raw, &a.Message)
		if err != nil {
			return fmt.Errorf("error reading 'message': %w", err)
		}
		delete(object, "message")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ErrorsDTO_Errors_Item to handle AdditionalProperties
func (a ErrorsDTO_Errors_Item) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["code"], err = json.Marshal(a.Code)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'code': %w", err)
	}

	object["message"], err = json.Marshal(a.Message)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'message': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Refresh the user authentication state
	// (POST /refresh)
	RefreshAuthentication(c *gin.Context)
	// Google OAuth sign-in
	// (POST /v1/signin/google)
	GoogleSignIn(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// RefreshAuthentication operation middleware
func (siw *ServerInterfaceWrapper) RefreshAuthentication(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RefreshAuthentication(c)
}

// GoogleSignIn operation middleware
func (siw *ServerInterfaceWrapper) GoogleSignIn(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GoogleSignIn(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/refresh", wrapper.RefreshAuthentication)
	router.POST(options.BaseURL+"/v1/signin/google", wrapper.GoogleSignIn)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXTY/bNhD9KwTbo1byNjkUum27QeGi6AbJJj0EhjGRRjZjidTyw60b6L8XQ1L+kpRN",
	"FjXaALl5xeFw3uObN9yPvFBNqyRKa3j+kZtijQ34ny+0Vtrc3t/RH61WLWor0C+hX6JfJZpCi9YKJXnO",
	"a2EsUxWL6wkXFhsfB2UpKAjql0eZrHaYnOUuVInDzD4j82sJx7+gaWvkOZ///vbmt/nt8ue72xc84XbX",
	"0ldjtZAr3iW8QWNgNZmvXz5OeePsWmnxN1CkP5EJw4TcQi3K4RldwjU+OKGx5Pk7HivsEy/28er9Byws",
	"1RQ/gNawG+yPzI3t+0WpVY2vxUrO5St8cGjs6OWsfNwSnF0vx8kMmdgdQWUwwHtCR8h2RVFXcfHTDAyO",
	"fxyLaZU0OAoGigKNuVcblEMcv/5xz0IAsz5iRAHOoKad32useM6/yw56z6LYszcGNZ1+DuX48JhpDMwr",
	"rDSaNbF5SSyfKG6sqh7UsHkbEPWwAILHwtoIjVIUGwkNTuzbL49sbbWqRI3zBlb4Rk+dHKOYoDDmdD11",
	"mUtRTqT4jPbsEyS8R3pU+XmhY6xGySwPDvjNGf9zZ+wvJVqPESsp5FLjw9dpjlNwTPt1+mOPRwefDOgv",
	"AueLLJKihaxUaC1pobD0M7gcf72GjZOC6j+twuvCoN6KAlmlNLvdOQvU0lZYr4rwgfnAm5dznvAtahN2",
	"X6ezdEZJVYsSWsFz/iydpc/IfsCuPQlZJMrTo4wdMvGWOg4sGmbXyGJ4IIUJ0qnaCEyYxq3aoGHCJgxk",
	"yTRap6VhwCT+eUIl7WphVysoU+6L017y85Lnx/MNpRWFX+FEdRh2vugfZtc9kSh9ydC2dQzOPhglD8/L",
	"x/Q2LRh/aadcGOdxVK6udz0VWHpi4KRiZixYTKdxdwl/fgEU0bhGSnfyqEKkCqhbXNOA3h1491D8gBvD",
	"Q7qDlfFyP72gBWXLttdZMJAs2Mm0qO6BtBKi/FHB4kk4273ehE3ZvAofkr2gyqD4CWaj9kZFOlTb8dOQ",
	"h35GY39S5e4zbiZacxzAFbjah26hdngYoUPf9pfzZdc6HDbdqf/QCO8GXTL71/U1MiYeaxOKxZIJmT7t",
	"zrrkIv3+dCSufTqS5xe4k+mej88lFnXN3qty9/+znpNHEHF8JeSR0/RfFqFvUNOA4/m7watXFVCzErcs",
	"xNArgf4D4GtrW5NnmQ+4glakwULSQjX5j7PrWUbl8W6xP/M8dSyB7c2DJnCc3X153aL7JwAA//9ZBCZ+",
	"4BAAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
