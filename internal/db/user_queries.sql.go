// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: user_queries.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO auth.users (
    code,
    google_id,
    email,
    profile_image_url,
    username,
    signed_up_at
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, code, google_id, email, profile_image_url, username, signed_up_at, deleted_at
`

type CreateUserParams struct {
	Code            string
	GoogleID        string
	Email           string
	ProfileImageUrl pgtype.Text
	Username        pgtype.Text
	SignedUpAt      pgtype.Timestamptz
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (AuthUser, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Code,
		arg.GoogleID,
		arg.Email,
		arg.ProfileImageUrl,
		arg.Username,
		arg.SignedUpAt,
	)
	var i AuthUser
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.GoogleID,
		&i.Email,
		&i.ProfileImageUrl,
		&i.Username,
		&i.SignedUpAt,
		&i.DeletedAt,
	)
	return i, err
}

const createUserSnapshot = `-- name: CreateUserSnapshot :one

INSERT INTO auth.user_snapshots (
    user_id,
    email,
    profile_image_url,
    username,
    created_at
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, user_id, email, profile_image_url, username, created_at
`

type CreateUserSnapshotParams struct {
	UserID          int64
	Email           string
	ProfileImageUrl pgtype.Text
	Username        pgtype.Text
	CreatedAt       pgtype.Timestamptz
}

// ========== User Snapshots Queries ==========
func (q *Queries) CreateUserSnapshot(ctx context.Context, arg CreateUserSnapshotParams) (AuthUserSnapshot, error) {
	row := q.db.QueryRow(ctx, createUserSnapshot,
		arg.UserID,
		arg.Email,
		arg.ProfileImageUrl,
		arg.Username,
		arg.CreatedAt,
	)
	var i AuthUserSnapshot
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Email,
		&i.ProfileImageUrl,
		&i.Username,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByCode = `-- name: GetUserByCode :one
SELECT id, code, google_id, email, profile_image_url, username, signed_up_at, deleted_at FROM auth.users 
WHERE code = $1 AND deleted_at IS NULL
`

func (q *Queries) GetUserByCode(ctx context.Context, code string) (AuthUser, error) {
	row := q.db.QueryRow(ctx, getUserByCode, code)
	var i AuthUser
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.GoogleID,
		&i.Email,
		&i.ProfileImageUrl,
		&i.Username,
		&i.SignedUpAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserByGoogleID = `-- name: GetUserByGoogleID :one
SELECT id, code, google_id, email, profile_image_url, username, signed_up_at, deleted_at FROM auth.users 
WHERE google_id = $1 AND deleted_at IS NULL
`

func (q *Queries) GetUserByGoogleID(ctx context.Context, googleID string) (AuthUser, error) {
	row := q.db.QueryRow(ctx, getUserByGoogleID, googleID)
	var i AuthUser
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.GoogleID,
		&i.Email,
		&i.ProfileImageUrl,
		&i.Username,
		&i.SignedUpAt,
		&i.DeletedAt,
	)
	return i, err
}

const softDeleteUserByCode = `-- name: SoftDeleteUserByCode :exec
UPDATE auth.users 
SET deleted_at = $2
WHERE code = $1 AND deleted_at IS NULL
`

type SoftDeleteUserByCodeParams struct {
	Code      string
	DeletedAt pgtype.Timestamptz
}

func (q *Queries) SoftDeleteUserByCode(ctx context.Context, arg SoftDeleteUserByCodeParams) error {
	_, err := q.db.Exec(ctx, softDeleteUserByCode, arg.Code, arg.DeletedAt)
	return err
}

const updateUserProfileByCode = `-- name: UpdateUserProfileByCode :one
UPDATE auth.users 
SET 
    email = $2,
    profile_image_url = $3,
    username = $4
WHERE code = $1 AND deleted_at IS NULL
RETURNING id, code, google_id, email, profile_image_url, username, signed_up_at, deleted_at
`

type UpdateUserProfileByCodeParams struct {
	Code            string
	Email           string
	ProfileImageUrl pgtype.Text
	Username        pgtype.Text
}

func (q *Queries) UpdateUserProfileByCode(ctx context.Context, arg UpdateUserProfileByCodeParams) (AuthUser, error) {
	row := q.db.QueryRow(ctx, updateUserProfileByCode,
		arg.Code,
		arg.Email,
		arg.ProfileImageUrl,
		arg.Username,
	)
	var i AuthUser
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.GoogleID,
		&i.Email,
		&i.ProfileImageUrl,
		&i.Username,
		&i.SignedUpAt,
		&i.DeletedAt,
	)
	return i, err
}
